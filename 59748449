    // Node Client
    
        Node node  = nodeBuilder().node();
        Client client = node.client();
    
    
    
    
    // For creating different clusters
    
        Node node = nodeBuilder().clusterName("indore").node();
        Client client = node.client();
    
    
    
    
    // Creating Index
    
        public static Map<String, Object> putJsonDocument(String Name,String color){
            Map<String, Object> jsonDocument = new HashMap<String, Object>();
            jsonDocument.put("Name", Name);
            jsonDocument.put("color", color);
            return jsonDocument;
        }
    
        Node node   = nodeBuilder().node();
        Client client   = node.client();
        
    // Index name is users, type is choice, id is 1
    client.prepareIndex("users", "choice", "1")
            .setSource(putJsonDocument("Bhavya","blue")).execute().actionGet();
            node.close();
    
    
    
    // Getting a document
    
            GetResponse getResponse = client.prepareGet("users", "choice", "1").execute().actionGet();
            Map<String, Object> source = getResponse.getSource();
            System.out.println("------------------------------");
            System.out.println("Index: " + getResponse.getIndex());
            System.out.println("Type: " + getResponse.getType());
            System.out.println("Id: " + getResponse.getId());
            System.out.println("Version: " + getResponse.getVersion());
            System.out.println(source);
            System.out.println("------------------------------");
    
    
    
    
    // Deleting a document
    
    public static void deleteDocument(Client client, String index, String type, String id){
            DeleteResponse response = client.prepareDelete(index, type, id).execute().actionGet();
            System.out.println("Information on the deleted document:");
            System.out.println("Index: " + response.getIndex());
            System.out.println("Type: " + response.getType());
            System.out.println("Id: " + response.getId());
            System.out.println("Version: " + getResponse.getVersion());
            }
            deleteDocument(client, "users", "choice", "1");
    
    
    
    
    // Updating a document
    
    public static void updateDocument(Client client, String index, String type,
            String id, String field, String newValue){
            Map<String, Object> updateObject = new HashMap<String, Object>();
            updateObject.put(field, newValue);
            client.prepareUpdate(index, type, id)
            .setScript("ctx._source." + field + "=" + field)
            .setScriptParams(updateObject).execute().actionGet();
            }
    
            updateDocument(client, "users", "choice", "1", "color", "black");
    
    
    
    
    // Nested Data Type - For indexing array of objects
    
    public void putMappingNestedDataTypeJSONSoure() throws ExecutionException, InterruptedException {
    
            PutMappingRequest putMappingRequest = new PutMappingRequest(users);
            putMappingRequest.type(users)
            .source("{\n" +
            "      \"properties\": {\n" +
            "        \"Name\": {\n" +
            "          \"type\": \"String\"\n" +
            "        },\n" +
            "\t\t\"color\": {\n" +
            "           \"type\": \"nested\",\n" +
            "          \"properties\": {\n" +
            "            \"color\": {\n" +
            "              \"type\": \"String\"\n" +
            "            },\n"
            "}",XContentType.JSON);
    
            AcknowledgedResponse acknowledgedResponse = client.admin().indices().putMapping(putMappingRequest).get();
            System.out.println("Put Mapping response : " + acknowledgedResponse.isAcknowledged());
            }

